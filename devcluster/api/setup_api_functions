# -*-Shell-script-*-
#
# K2HR3 Utilities
#
# Copyright 2018 Yahoo! Japan Corporation.
#
# K2HR3 is K2hdkc based Resource and Roles and policy Rules, gathers
# common management information for the cloud.
# K2HR3 can dynamically manage information as "who", "what", "operate".
# These are stored as roles, resources, policies in K2hdkc, and the
# client system can dynamically read and modify these information.
#
# For the full copyright and license information, please view
# the licenses file that was distributed with this source code.
#
# AUTHOR:   Hirotaka Wakabayashi
# CREATE:   Mon Jul 9 2018
# REVISION:
#

# Configures the k2hr3-api service manager conf
#
# Params::
#   $1 service name
#   $2 service management file path
#   $3 username of k2hr3-api process privilege
#   $4(optional) npm modules directory owner
#   $5(optional) the api log file path
#
# Returns::
#   0 on success
#   1 on failure
#
# Note::
#   This function is designed for unit tests.
#
configure_k2hr3_api_service_manager_file() {
    _service_manager=${1:?"service_manager should be nonzero"}
    _service_manager_file=${2:?"service_manager_file should be nonzero"}
    _k2hr3_api_runuser=${3:?"k2hr3_api_runner should be nonzero. Check if it is defined in setup_api_*.ini"}

    logger -t ${TAG} -p user.debug "_service_manager=${_service_manager} _service_manager_file=${_service_manager_file} _k2hr3_api_runuser=${_k2hr3_api_runuser}"
    # A dry run returns 0
    if test -n "${DRYRUN-}"; then
        return 0
    fi

    if ! test -f "${service_manager_file}"; then
        logger -t ${TAG} -p user.err "${_service_manager_file} should exist"
        return 1
    fi

    if test "${_service_manager}" = "systemd"; then
        if test -n "${_k2hr3_api_runuser}"; then
            NPM_USER_HOME=$(eval echo "~${_k2hr3_api_runuser}")
            # Replaces "WorkingDirectory=/home/k2hr3" with a user defined value
            logger -t ${TAG} -p user.debug "perl -pi -e \"s|WorkingDirectory=.*$|WorkingDirectory=${NPM_USER_HOME}|g\" ${_service_manager_file}"
            perl -pi -e "s|WorkingDirectory=.*$|WorkingDirectory=${NPM_USER_HOME}|g" ${_service_manager_file}
            RESULT=$?
            if test "${RESULT}" -ne 0; then
                logger -t ${TAG} -p user.err "RESULT should be zero, not ${RESULT}"
                return 1
            fi
            # Replaces "Environment=HOME=/home/k2hr3" with a user defined value
            logger -t ${TAG} -p user.debug "perl -pi -e \"s|Environment=HOME=.*$|Environment=HOME=${NPM_USER_HOME}|g\" ${_service_manager_file}"
            perl -pi -e "s|Environment=HOME=.*$|Environment=HOME=${NPM_USER_HOME}|g" ${_service_manager_file}
            RESULT=$?
            if test "${RESULT}" -ne 0; then
                logger -t ${TAG} -p user.err "RESULT should be zero, not ${RESULT}"
                return 1
            fi
            # Replaces "Environment=NODE_CONFIG_DIR=" with a user defined value
            logger -t ${TAG} -p user.debug "perl -pi -e \"s|Environment=NODE_CONFIG_DIR=.*$|Environment=NODE_CONFIG_DIR=${NPM_USER_HOME}/etc/k2hr3-api|g\" ${_service_manager_file}"
            perl -pi -e "s|Environment=NODE_CONFIG_DIR=.*$|Environment=NODE_CONFIG_DIR=${NPM_USER_HOME}/etc/k2hr3-api|g" ${_service_manager_file}
            RESULT=$?
            if test "${RESULT}" -ne 0; then
                logger -t ${TAG} -p user.err "RESULT should be zero, not ${RESULT}"
                return 1
            fi
        else
            logger -t ${TAG} -p user.err "k2hr3_api_runuser must be nonzero"
            return 1
        fi
    else
        logger -t ${TAG} -p user.err "SERVICE_MANAGER is either systemd, not ${SERVICE_MANAGER}"
        return 1
    fi
    return 0
}

#
# EOF
#
