#!/bin/sh
# -*-Shell-script-*-
#
# K2HR3 Utilities
#
# Copyright 2018 Yahoo! Japan Corporation.
#
# K2HR3 is K2hdkc based Resource and Roles and policy Rules, gathers
# common management information for the cloud.
# K2HR3 can dynamically manage information as "who", "what", "operate".
# These are stored as roles, resources, policies in K2hdkc, and the
# client system can dynamically read and modify these information.
#
# For the full copyright and license information, please view
# the licenses file that was distributed with this source code.
#
# AUTHOR:   Hirotaka Wakabayashi
# CREATE:   Mon Jul 9 2018
# REVISION:
#

# Configures the chmpx default configuration
#
# Params::
#   $1 the chmpx default configuration file
#   $2 the chmpx server name
#   $3 the k2hdkc data directory
#
# Returns::
#   0 on success
#   1 on failure
#
configure_chmpx_server_ini() {
    _chmpx_server_ini_file=${1:?"chmpx_server_ini_file must be nonzero"}
    _chmpx_server_name=${2:?"chmpx_server_name must be nonzero"}
    _k2hdkc_data_dir=${3:?"k2hdkc_data_dir must be nonzero"}

    logger -t ${TAG} -p user.debug "configure_chmpx_server_ini _chmpx_server_ini_file=${_chmpx_server_ini_file} _chmpx_server_name=${_chmpx_server_name} _k2hdkc_data_dir=${_k2hdkc_data_dir}"

    if test -f "${_chmpx_server_ini_file}" -a -n "${_chmpx_server_name}" -a -n "${_k2hdkc_data_dir}"; then
        logger -t ${TAG} -p user.debug "perl -pi -e \"BEGIN{undef $/;} s|\[SVRNODE\].*\nPORT|[SVRNODE]\nNAME                           = ${_chmpx_server_name}\nPORT|smg\" ${_chmpx_server_ini_file}"
        perl -pi -e "BEGIN{undef $/;} s|\[SVRNODE\].*\nPORT|[SVRNODE]\nNAME                           = ${_chmpx_server_name}\nPORT|smg" ${_chmpx_server_ini_file}
        RESULT=$?
        if test "${RESULT}" -ne 0; then
            logger -t ${TAG} -p user.err "RESULT should be zero, not ${RESULT}"
            return 1
        fi
        logger -t ${TAG} -p user.debug "perl -pi -e \"s|^K2HFILE.*$|K2HFILE                                = ${_k2hdkc_data_dir}/k2hdkc.k2h|g\" ${_chmpx_server_ini_file}"
        perl -pi -e "s|^K2HFILE.*$|K2HFILE                                = ${_k2hdkc_data_dir}/k2hdkc.k2h|g" ${_chmpx_server_ini_file}
        RESULT=$?
        if test "${RESULT}" -ne 0; then
            logger -t ${TAG} -p user.err "RESULT should be zero, not ${RESULT}"
            return 1
        fi
    else
        logger -t ${TAG} -p user.err "_chmpx_server_name should be nonzero, ${_chmpx_server_name}"
        logger -t ${TAG} -p user.err "_k2hdkc_data_dir should be nonzero, ${_k2hdkc_data_dir}"
        logger -t ${TAG} -p user.err "${_chmpx_server_ini_file} should exists"
        return 1
    fi
    return 0
}

# Configures the chmpx slave's default configuration
#
# Params::
#   $1 the chmpx slave's default configuration file
#   $2 the chmpx server name
#
# Returns::
#   0 on success
#   1 on failure
#
configure_chmpx_slave_ini() {
    _chmpx_slave_ini_file=${1:?"chmpx_slave_ini_file must be nonzero"}
    _chmpx_server_name=${2:?"chmpx_server_name must be nonzero"}

    logger -t ${TAG} -p user.debug "configure_chmpx_slave_ini _chmpx_slave_ini_file=${_chmpx_slave_ini_file} _chmpx_server_name=${_chmpx_server_name}"

    if test -f "${_chmpx_slave_ini_file}" -a -n "${_chmpx_server_name}"; then
        logger -t ${TAG} -p user.debug "perl -pi -e \"BEGIN{undef $/;} s|\[SVRNODE\].*\\nPORT|[SVRNODE]\\nNAME                = ${_chmpx_server_name}\\nPORT|smg\" ${_chmpx_slave_ini_file}\n"
        perl -pi -e "BEGIN{undef $/;} s|\[SVRNODE\].*\nPORT|[SVRNODE]\nNAME                = ${_chmpx_server_name}\nPORT|smg" ${_chmpx_slave_ini_file}
        RESULT=$?
        if test "${RESULT}" -ne 0; then
            logger -t ${TAG} -p user.err "RESULT should be zero, not ${RESULT}"
            return 1
        fi
    else
        logger -t ${TAG} -p user.err "${_chmpx_slave_ini_file} must exist"
        logger -t ${TAG} -p user.err "chmpx_server_name should be nonzero, ${_chmpx_server_name}"
        return 1
    fi
    return 0
}

# Installs the configured chmpx config file
#
# Params::
#   $1 a source chmpx config file
#   $2 a destination chmpx config file
#
# Returns::
#   0 on success
#   1 on failure
#
install_chmpx_conf() {
    _src_chmpx_conf_file=${1:?"src_chmpx_conf_file must be nonzero"}
    _dst_chmpx_conf_file=${2:?"dst_chmpx_conf_file must be nonzero"}

    logger -t ${TAG} -p user.debug "install_chmpx_conf _src_chmpx_conf_file=${_src_chmpx_conf_file} _dst_chmpx_conf_file=${_dst_chmpx_conf_file}"
    # A dry run returns 0
    if test -n "${DRYRUN-}"; then
        return 0
    fi

    if test -n "${_src_chmpx_conf_file}" -a -n "${_dst_chmpx_conf_file}"; then
        logger -t ${TAG} -p user.debug "sudo install -C -m 0644 -o root -v ${_src_chmpx_conf_file} ${_dst_chmpx_conf_file}"
        sudo install -C -m 0644 -o root -v ${_src_chmpx_conf_file} ${_dst_chmpx_conf_file}
        RESULT=$?
        if test "${RESULT}" -ne 0; then
            logger -t ${TAG} -p user.err "RESULT should be zero, not ${RESULT}"
            return 1
        fi
    else
        logger -t ${TAG} -p user.err "src_chmpx_conf_file should be nonzero, ${_src_chmpx_conf_file}"
        logger -t ${TAG} -p user.err "dst_chmpx_conf_file should be nonzero, ${_dst_chmpx_conf_file}"
        return 1
    fi
    return 0
}

# Configures the chmpx, chmpx-slave and k2hdkc's service manager default configuration
#
# Params::
#   $1 a service manager(systemd)
#   $2 a service manager file(systemd Unit file or Sysvinit script)
#   $3 a process execution username
#   $4 a chmpx configuration file
#   $5 POSIX mqueue max size
#   $6(optional) a flag to distinguish k2hdkc or not
#   $7(optional) loglevel(default value is "err")
#
# Returns::
#   0 on success
#   1 on failure
#
# Uses globals::
#   COMPONENT
#
configure_chmpx_service_manager_file() {
    _service_manager=${1:?"service_manager must be nonzero"}
    _service_manager_file=${2:?"service_manager_file must be nonzero"}
    _k2hr3_dkc_runuser=${3:?"k2hr3_${COMPONENT}_runuser must be nonzero"}
    _chmpx_conf_file=${4:?"chmpx_conf_file must be nonzero"}
    _chmpx_msg_max=${5:?"chmpx_msg_max must be nonzero"}
    _is_k2hdkc=${6:-}
    _loglevel=${7:-err}

    logger -t ${TAG} -p user.debug "configure_chmpx_service_manager_file _service_manager=${_service_manager} _service_manager_file=${_service_manager_file} _k2hr3_dkc_runuser=${_k2hr3_dkc_runuser} _chmpx_conf_file=${_chmpx_conf_file} _chmpx_msg_max=${_chmpx_msg_max} _is_k2hdkc=${_is_k2hdkc} _loglevel=${_loglevel}"

    if test "${_service_manager}" = "systemd"; then
        if test -f "${_service_manager_file}"; then
            # Replaces "User=k2hr3" with a user defined value
            if test -n "${_k2hr3_dkc_runuser}"; then
                logger -t ${TAG} -p user.debug "perl -pi -e \"s|User=.*$|User=${_k2hr3_dkc_runuser}|g\" ${_service_manager_file}"
                perl -pi -e "s|User=.*$|User=${_k2hr3_dkc_runuser}|g" ${_service_manager_file}
                RESULT=$?
                if test "${RESULT}" -ne 0; then
                    logger -t ${TAG} -p user.err "RESULT should be zero, not ${RESULT}"
                    return 1
                fi
            else
                logger -t ${TAG} -p user.err "k2hr3_dkc_runuser must be nonzero"
                return 1
            fi

            # Replaces "fs.mqueue.msg_max=264" with a user defined value
            if test -n "${_chmpx_msg_max}"; then
                logger -t ${TAG} -p user.debug "perl -pi -e \"s|ExecStartPre=.*fs.mqueue.msg_max=\d+$|ExecStartPre=/sbin/sysctl fs.mqueue.msg_max=${_chmpx_msg_max}|g\" ${_service_manager_file}"
                perl -pi -e "s|ExecStartPre=.*fs.mqueue.msg_max=\d+$|ExecStartPre=/sbin/sysctl fs.mqueue.msg_max=${_chmpx_msg_max}|g" ${_service_manager_file}
                RESULT=$?
                if test "${RESULT}" -ne 0; then
                    logger -t ${TAG} -p user.err "RESULT should be zero, not ${RESULT}"
                    return 1
                fi
            else
                logger -t ${TAG} -p user.err "service_manager_file must be nonzero"
                return 1
            fi

            # Replaces "/etc/k2hdkc/server.ini" with a user defined value
            if test -n "${_chmpx_conf_file}"; then
                if test "${_is_k2hdkc}" -eq 1; then
                    logger -t ${TAG} -p user.debug "perl -pi -e \"s|ExecStart=.*$|ExecStart=/usr/bin/k2hdkc -conf ${_chmpx_conf_file} -d ${_loglevel}|g\" ${_service_manager_file}"
                    perl -pi -e "s|ExecStart=.*$|ExecStart=/usr/bin/k2hdkc -conf ${_chmpx_conf_file} -d ${_loglevel}|g" ${_service_manager_file}
                else
                    logger -t ${TAG} -p user.debug "perl -pi -e \"s|ExecStart=.*$|ExecStart=/usr/bin/chmpx -conf ${_chmpx_conf_file} -d ${_loglevel}|g\" ${_service_manager_file}"
                    perl -pi -e "s|ExecStart=.*$|ExecStart=/usr/bin/chmpx -conf ${_chmpx_conf_file} -d ${_loglevel}|g" ${_service_manager_file}
                fi
                RESULT=$?
                if test "${RESULT}" -ne 0; then
                    logger -t ${TAG} -p user.err "RESULT should be zero, not ${RESULT}"
                    return 1
                fi
            else
                logger -t ${TAG} -p user.err "chmpx_conf_file must be nonzero"
                return 1
            fi
        else
            logger -t ${TAG} -p user.err "${_service_manager_file} should exists"
            return 1
        fi
    else
        logger -t ${TAG} -p user.err "${_service_manager} is either systemd, not ${_service_manager}"
        return 1
    fi
    return 0
}

# Makes the k2hdkc data directory
#
# Params::
#   $1 the process execution username
#   $2 the k2hdkc data directory
#
# Returns::
#   0 on success
#   1 on failure
#
# Uses globals::
#   OS_NAME
#
make_k2hdkc_data_dir() {
    _runuser=${1:?"runuser must be nonzero"}
    _k2hdkc_data_dir=${2:?"k2hdkc_data_dir must be nonzero"}

    logger -t ${TAG} -p user.debug "make_k2hdkc_data_dir _runuser=${_runuser} _k2hdkc_data_dir=${_k2hdkc_data_dir}"
    # A dry run returns 0
    if test -n "${DRYRUN-}"; then
        return 0
    fi

    if test -n "${_k2hdkc_data_dir}" -a -n ${_runuser}; then
        logger -t ${TAG} -p user.debug "id ${_runuser}"
        id "${_runuser}"
        RESULT=$?
        if test "${RESULT}" -ne 0; then
            logger -t ${TAG} -p user.warn "RESULT should be zero, not ${RESULT}"
            if test "${OS_NAME}" = "debian" -o "${OS_NAME}" = "ubuntu"; then
                logger -t ${TAG} -p user.debug "sudo adduser --disabled-password --gecos \"\" ${_runuser}"
                sudo adduser --disabled-password --gecos "" "${_runuser}"
                RESULT=$?
                if test "${RESULT}" -ne 0; then
                    logger -t ${TAG} -p user.err "RESULT should be zero, not ${RESULT}"
                    return 1
                fi
            else
                logger -t ${TAG} -p user.debug "sudo adduser ${_runuser}"
                sudo adduser "${_runuser}"
                RESULT=$?
                if test "${RESULT}" -ne 0; then
                    logger -t ${TAG} -p user.err "RESULT should be zero, not ${RESULT}"
                    return 1
                fi
            fi
        fi
        if test ! -d "${_k2hdkc_data_dir}"; then
            logger -t ${TAG} -p user.debug "sudo install -o ${_runuser} -d ${_k2hdkc_data_dir}"
            sudo install -o ${_runuser} -d ${_k2hdkc_data_dir}
            RESULT=$?
            if test "${RESULT}" -ne 0; then
                logger -t ${TAG} -p user.err "RESULT should be zero, not ${RESULT}"
                return 1
            fi
        else
            logger -t ${TAG} -p user.warn "k2hdkc_data_dir already exists, ${_k2hdkc_data_dir}"
        fi
    else
        logger -t ${TAG} -p user.err "k2hdkc_data_dir and runuser should be nonzero, ${_k2hdkc_data_dir}, ${_runuser}"
        return 1
    fi
    return 0
}

# Makes the k2hdkc conf directory
#
# Params::
#   $1 the k2hdkc conf directory
#
# Returns::
#   0 on success
#   1 on failure
#
make_k2hdkc_conf_dir() {
    _k2hdkc_conf_dir=${1:?"k2hdkc_conf_dir must be nonzero"}

    if test -n "${_k2hdkc_conf_dir}"; then
        if test ! -d "${_k2hdkc_conf_dir}"; then
            logger -t ${TAG} -p user.debug "sudo install -d ${_k2hdkc_conf_dir}"
            sudo install -d ${_k2hdkc_conf_dir}
            RESULT=$?
            if test "${RESULT}" -ne 0; then
                logger -t ${TAG} -p user.err "RESULT should be zero, not ${RESULT}"
                return 1
            fi
        else
            logger -t ${TAG} -p user.warn "_k2hdkc_conf_dir already exists, ${_k2hdkc_conf_dir}"
        fi
    else
        logger -t ${TAG} -p user.err "k2hdkc_conf_dir should be nonzero, ${_k2hdkc_conf_dir}"
        return 1
    fi
    return 0
}

#
# VIM modelines
#
# vim:set ts=4 fenc=utf-8:
#
